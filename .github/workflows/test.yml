name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          CI: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
      
      - name: Generate test report
        if: matrix.node-version == '20.x'
        run: node scripts/test-report.js
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '20.x'
        with:
          name: test-results
          path: |
            coverage/
            test-results.json

  e2e-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Build application
        run: npm run build
      
      - name: Start application
        run: npm run start &
        env:
          NODE_ENV: production
      
      - name: Wait for application to start
        run: npx wait-on http://localhost:3000 --timeout 60000
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/
      
      - name: Upload E2E videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-videos
          path: test-results/

  quality-gate:
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: ./coverage/
        continue-on-error: true
      
      - name: Check coverage thresholds
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            echo "✅ Coverage file found, checking thresholds..."
            node -e "
              const coverage = require('./coverage/coverage-summary.json');
              const thresholds = { statements: 70, branches: 70, functions: 70, lines: 70 };
              const total = coverage.total;
              let failed = false;
              
              Object.entries(thresholds).forEach(([metric, threshold]) => {
                const pct = total[metric].pct;
                if (pct < threshold) {
                  console.log(\`❌ \${metric}: \${pct}% < \${threshold}%\`);
                  failed = true;
                } else {
                  console.log(\`✅ \${metric}: \${pct}% >= \${threshold}%\`);
                }
              });
              
              if (failed) {
                console.log('\\n🚨 Coverage thresholds not met!');
                process.exit(1);
              } else {
                console.log('\\n✅ All coverage thresholds met!');
              }
            "
          else
            echo "⚠️ Coverage file not found, skipping coverage check"
            echo "This may indicate that unit tests failed or artifacts were not uploaded"
          fi
      
      - name: Quality gate status
        if: needs.unit-tests.result == 'success' && needs.e2e-tests.result == 'success'
        run: |
          echo "✅ Quality gate passed!"
          echo "- Unit tests: ✅ Passed"
          echo "- E2E tests: ✅ Passed"
          echo "- Coverage: ✅ Thresholds met"
      
      - name: Quality gate failure
        if: needs.unit-tests.result != 'success' || needs.e2e-tests.result != 'success'
        run: |
          echo "❌ Quality gate failed!"
          echo "- Unit tests: ${{ needs.unit-tests.result }}"
          echo "- E2E tests: ${{ needs.e2e-tests.result }}"
          exit 1